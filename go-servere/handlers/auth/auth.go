package auth

import (
	"aliot/models"
	password "aliot/pkg/Password"

	cjwt "aliot/pkg/jwt"
	"aliot/pkg/vars"
	"errors"
	"fmt"
	"net/http"
	"os"
	"strings"

	"github.com/Avdushin/gogger/logger"
	"github.com/golang-jwt/jwt"

	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

type AuthHandler struct {
	DB *gorm.DB
}

// @Summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é (user)
// @Tags auth
// @Accept json
// @Produce json
// @Request json
// @Param request body swagger.AuthRequest true "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞"
// @Success 201 {string} string "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
// @Failure 400 {string} string "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Router /api/signup [POST]
func (u *AuthHandler) Register(c *gin.Context) {
	var user models.User
	fmt.Printf("Received user data: %+v\n", user)
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	if user.Email == "" || user.Password == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid email or password"})
		return
	}

	var existingUser models.User
	if err := u.DB.Where("email = ?", user.Email).First(&existingUser).Error; err == nil {
		logger.Warning("User with email %s already exists\n", user.Email)
		c.JSON(http.StatusConflict, gin.H{"error": "Email already exists"})
		return
	} else if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		logger.Error("Failed to check email existence: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to check email existence"})
		return
	}

	// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	hashedPassword, err := password.HashPassword(user.Password)
	if err != nil {
		// Log password hashing error
		fmt.Printf("Failed to hash password: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to hash password"})
		return
	}

	user.Password = hashedPassword
	user.Role = string(models.SimpleUser)
	// user.LastName =
	// –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
	if user.Role == "" {
		user.Role = string(models.SimpleUser)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	u.DB.Create(&user)

	basket := models.Basket{UserID: user.ID}
	if err := u.DB.Create(&basket).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create basket"})
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
	token, err := cjwt.CreateToken(user)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to generate token"})
		return
	}

	// Log successful registration
	fmt.Printf("User successfully registered: %+v\n", user)
	c.JSON(http.StatusCreated, gin.H{
		"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
		"token":   token,
	})
}

// @Summary –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—á–∞ JWT —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Cookie
// @Tags auth
// @Accept json
// @Produce json
// @Request json
// @Param request body swagger.AuthRequest true "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞"
// @Success 200 {object} swagger.SuccessResponse "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
// @Failure 400 {string} string "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Router /api/login [POST]
func (u *AuthHandler) Login(c *gin.Context) {
	var user models.User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	var dbUser models.User
	if err := u.DB.Where("email = ?", user.Email).First(&dbUser).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "User not found"})
			return
		}
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to query user"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
	if err := bcrypt.CompareHashAndPassword([]byte(dbUser.Password), []byte(user.Password)); err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{
			"error":    "Invalid credentials",
			"dbpass":   []byte(dbUser.Password),
			"password": []byte(user.Password)})
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
	token, err := cjwt.CreateToken(dbUser)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to generate token"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
		"token":   token,
	})
}

// @Summary –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Logout)
// @Description –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –∏–∑ Cookie
// @Tags auth
// @Produce json
// @Success 200 {string} string "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"
// @Router /api/logout [GET]
// func (u *AuthHandler) Logout(c *gin.Context) {
// 	c.SetCookie("token", "", -1, "/", "", false, false)
// 	c.JSON(http.StatusOK, gin.H{"message": "Logout successful"})
// }

func (u *AuthHandler) Checkauth(c *gin.Context) {

	tokenString := c.GetHeader("Authorization")
	if tokenString == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Token not found"})
		return
	}

	// Remove the "Bearer " prefix if present
	tokenString = strings.ReplaceAll(tokenString, "Bearer ", "")

	// Parse the token
	token, err := jwt.ParseWithClaims(tokenString, &models.Claims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte(os.Getenv("JWT_SECRET")), nil
	})
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
		return
	}

	claims, ok := token.Claims.(*models.Claims)
	if !ok || !token.Valid {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid or expired token"})
		return
	}

	// Set user claims in the context
	c.Set("user", *claims)

	// Respond with the token
	c.JSON(http.StatusOK, gin.H{"token": tokenString})

	// user, exists := c.Get("user")
	// if !exists {
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
	// 	return
	// }

	// fmt.Printf("   USER:    ", user)
	// // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç models.User
	// userData, ok := user.(models.User)
	// if !ok {
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
	// 	return
	// }

	// // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// token, err := jwt.CreateToken(userData)
	// if err != nil {
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"})
	// 	return
	// }

	// // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
	// c.JSON(http.StatusOK, gin.H{"token": token})
}

func CreateAdmin(db *gorm.DB) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	var adminUser models.User
	result := db.Where("role = ?", string(models.Admin)).First(&adminUser)
	if result.Error == nil {
		logger.Info("üïµÔ∏è  Admin user already exists.")
		return
	}

	// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
	hashedPassword, err := password.HashPassword(vars.ADMIN_PASS)
	if err != nil {
		logger.Error("Failed to hash admin password:", err)
		return
	}

	// –°–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	newAdmin := models.User{

		Email:    vars.ADMIN_EMAIL,
		Role:     string(models.Admin),
		Password: hashedPassword,
	}

	if err := db.Create(&newAdmin).Error; err != nil {
		logger.Error("üî™üïµÔ∏è  Failed to create admin user:", err)
		return
	}

	logger.Debug("üïµÔ∏è  Admin user created successfully...")
}
